{"name":"Datatables server","tagline":"Server-side processing for DataTables in Ruby","body":"# DatatablesServer\r\n\r\n[![Build Status](https://travis-ci.org/dfmonaco/datatables_server.svg?branch=master)](https://travis-ci.org/dfmonaco/datatables_server)\r\n[![Coverage Status](https://coveralls.io/repos/dfmonaco/datatables_server/badge.png)](https://coveralls.io/r/dfmonaco/datatables_server)\r\n\r\nDatatablesServer will receive a number of variables from a DataTables client and\r\nit will perform all the required processing (i.e. when paging, sorting, filtering etc),\r\nand then return the data in the format required by DataTables.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'datatables_server'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install datatables_server\r\n\r\n## Usage\r\n### Basic usage\r\nTo use DatatablesServer you just need to inherit from `DatatablesServer::Base` and implement two methods: `#data`, wich must return\r\nan `ActiveRecord::Relation` and `#columns` wich must return the columns used in the client table in the right order and represented\r\nas an array of strings in the form `'table_name.column_name'`.\r\n\r\nDatatables does NOT depend on Rails, it can be used perfectly with any framework, right now the only dependency it's ActiveRecord,\r\nbut it's very easy to implement an adapter for other ORMs.\r\n\r\n```ruby\r\n# product.rb\r\n\r\nclass Product < ActiveRecord::Base\r\nend\r\n```\r\n\r\n```ruby\r\n#product_datatables\r\n\r\nclass ProductDatatables < DatatablesServer::Base\r\n\r\n  def data\r\n    Product.all\r\n  end\r\n\r\n  def columns\r\n    %w(products.name products.price products.description)\r\n  end\r\nend\r\n```\r\nAnd that's it!, DatatablesServer will handle paging, sorting and filtering by returning the right JSON document to the client,\r\nyou just have to instantiate it with the params sent by DataTables, and call the `#as_json` mehtod.\r\n\r\n```ruby\r\nProductDatatables.new(params).as_json # => JSON document to be consumed by the client\r\n```\r\n\r\n### Processing raw data\r\nIf you want to process the raw data that's coming from the datatabase you can implement a method with the same name as the column\r\nand do whatever you want with the data.\r\n\r\n```ruby\r\nclass ProductDatatables < DatatablesServer::Base\r\n  ....\r\n\r\n  def name(raw_name)\r\n    raw_name.capitalize\r\n  end\r\n\r\n  def price(raw_price)\r\n    \"$ #{raw_price}\"\r\n  end\r\nend\r\n```\r\n\r\n### Wroking with joins\r\nTo work with joins you don't have to do anything special, just define the required methods as before.\r\n\r\n```ruby\r\n#product_datatables\r\n\r\nclass ProductDatatables < DatatablesServer::Base\r\n\r\n  # Product belongs_to :supplier\r\n  def data\r\n    Product.select('products.name', 'suppliers.email').joins(:supplier)\r\n  end\r\n\r\n  def columns\r\n    %w(products.name suppliers.email)\r\n  end\r\nend\r\n```\r\n### Rails example\r\nAs I said DatatablesServer does not depend on Rails, this is just an example of a possible implementation.\r\n\r\n```ruby\r\n# app/controllers/products_controller.rb\r\n\r\nclass ProductsController < ApplicationController\r\n  def index\r\n    respond_to do |format|\r\n      format.html\r\n      # you can pass the view_context if you want to use helper methods\r\n      format.json {render json: ProductDatatables.new(view_context)}\r\n    end\r\n  end\r\nend\r\n```\r\n```ruby\r\n# app/datatables/product.rb\r\n\r\nclass ProductDatatables < DatatablesServer::Base\r\n\r\n  attr_reader :h\r\n\r\n  def initialize(view_context)\r\n    super(view_context.params)\r\n    @h = view_context\r\n  end\r\n\r\n  def data\r\n    Product.in_stock\r\n  end\r\n\r\n  def columns\r\n    %w(products.name products.price products.description)\r\n  end\r\n\r\n  def price(raw_price)\r\n    h.number_to_currency(price)\r\n  end\r\nend\r\n```\r\n\r\n## Compatibility\r\n\r\nFor any given version, check `.travis.yml` to see what Ruby versions are being tested for compatibility.\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/[my-github-username]/datatables_server/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n\r\n## License\r\n\r\n__MIT License__. *Copyright 2014 Diego MÃ³naco*\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}